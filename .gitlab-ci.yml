#include:
#  template: Dependency-Scanning.gitlab-ci.yml

# This file is a template, and might need editing before it works on your project.
# Official docker image.

stages:
  - build
  - test
  - deploy

.build: &build
  image: docker:latest
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2

build-master:
  <<: *build
  script:
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" || true
    - docker pull "$CI_REGISTRY_IMAGE" || true
    - docker build --cache-from "$CI_REGISTRY_IMAGE" --cache-from "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" -t "$CI_REGISTRY_IMAGE" -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker push "$CI_REGISTRY_IMAGE"
  only:
    - master
    - tags

build:
  <<: *build
  script:
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" || true
    - docker pull "$CI_REGISTRY_IMAGE:master" || true
    - docker pull "$CI_REGISTRY_IMAGE" || true
    - docker build --cache-from "$CI_REGISTRY_IMAGE" --cache-from "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" --cache-from "$CI_REGISTRY_IMAGE:master" -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  except:
    - master
    - tags

test:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  stage: test
  services:
    - postgres
  variables:
    DATABASE_URL: postgres://postgres:postgres@postgres/postgres
    SECRET_KEY: test
    GIT_STRATEGY: none
    # See https://github.com/docker-library/postgres/issues/681
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - cd /app
    - pipenv install coverage
    - pipenv run python manage.py migrate
  script:
    - pipenv run coverage run --source='.' manage.py test
    - pipenv run coverage report


.deploy: &deploy
  stage: deploy
  image: cdrx/rancher-gitlab-deploy
  when: manual
  variables:
    GIT_STRATEGY: none

deploy-prod:
  <<: *deploy
  script:
    - upgrade --stack portailva --service portailva --start-before-stopping --environment Production --upgrade-timeout 600 --new-image "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  only:
    - master
    - tags

deploy-preprod:
  <<: *deploy
  script:
    - upgrade --stack portailva-preprod --service portailva --start-before-stopping --environment Production --upgrade-timeout 600 --new-image "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"

